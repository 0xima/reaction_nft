// SPDX-License-Identifier: MIT
pragma solidity 0.8.11;

import "@openzeppelin/contracts@4.6.0/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts@4.6.0/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts@4.6.0/access/Ownable.sol";
import "@openzeppelin/contracts@4.6.0/utils/Counters.sol";

// https://github.com/maticnetwork/pos-portal/blob/master/contracts/common/ContextMixin.sol
abstract contract ContextMixin {
    function msgSender() internal view returns (address payable sender) {
        if (msg.sender == address(this)) {
            bytes memory array = msg.data;
            uint256 index = msg.data.length;
            assembly {
                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.
                sender := and(
                    mload(add(array, index)),
                    0xffffffffffffffffffffffffffffffffffffffff
                )
            }
        } else {
            sender = payable(msg.sender);
        }
        return sender;
    }
}

contract ReactiveNFTs is ERC721, ERC721Enumerable, Ownable, ContextMixin {
    uint public constant MAX_SUPPLY = 5;
    uint public mintValue = 0 ether;
    string public baseUri = "ipfs://URI/";
    string public uriExtension = ".json";
    bool public saleState = true;

    /// Testing
    string public baseUriDay = "ipfs://bafybeidj7tpbxuhfrvrdwljo4nzwy4z2w3henn3nvjhmjgtqccvuz6kqfi/";
    string public baseUriNight = "ipfs://bafybeie25x2iudwpojpf7hi7l3udsn3okoycvfteecym5mv5ozltxtmc5i/";
    bool public isDay = true;
    function setDayNight(bool _state) external onlyOwner {
        require(isDay != _state, "isDay won't change");
        isDay = _state;
    }

    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;

    constructor() ERC721("ReactiveNFTs", "rNFTs") {}
    receive() external payable {}
    fallback() external payable {}

    function mint() external payable {
        require(msg.sender == tx.origin, "Not allowed");
        require(saleState, "Sale is closed");
        require(totalSupply() < MAX_SUPPLY, "Can't mint more");
        require(msg.value >= mintValue, "Not enough value");

        _tokenIdCounter.increment();
        uint256 tokenId = _tokenIdCounter.current();
        _safeMint(msg.sender, tokenId);
    }

    /// Only owner

    function withdraw() external onlyOwner {
        require(address(this).balance > 0, "No balance");
        payable(owner()).transfer(address(this).balance);
    }

    function setSaleState(bool _state) external onlyOwner {
        require(saleState != _state, "Sale state won't change");
        saleState = _state;
    }

    function setMintValue(uint _value) external onlyOwner {
        require(mintValue != _value, "Mint value won't change");
        mintValue = _value;
    }

    function setURI(string memory _baseUri, string memory _uriExtension) external onlyOwner {
        require(keccak256(bytes(baseUri)) != keccak256(bytes(_baseUri)) || keccak256(bytes(uriExtension)) != keccak256(bytes(_uriExtension)), "URI won't change");
        baseUri = _baseUri;
        uriExtension = _uriExtension;
    }

    /// Overrides

    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory _baseUri = _baseURI();
        return bytes(_baseUri).length > 0
        ? string(abi.encodePacked(_baseUri, Strings.toString(tokenId), uriExtension)) 
        : "";
    }

    function _baseURI() internal view override returns (string memory) {
        return isDay ? baseUriDay : baseUriNight;
        //return baseUri;
    }

    /// Polygon

    // Override isApprovedForAll to auto-approve OS's proxy contract
    function isApprovedForAll(address _owner, address _operator) public override view returns (bool isOperator) {
        // if OpenSea's ERC721 Proxy Address is detected, auto-return true, use 0x58807baD0B376efc12F5AD86aAc70E78ed67deaE
        // for Polygon's Mumbai testnet, use 0xff7Ca10aF37178BdD056628eF42fD7F799fAc77c
        if (_operator == address(0xff7Ca10aF37178BdD056628eF42fD7F799fAc77c)) {
            return true;
        }
        
        // otherwise, use the default ERC721.isApprovedForAll()
        return ERC721.isApprovedForAll(_owner, _operator);
    }

    // This is used instead of msg.sender as transactions won't be sent by the original token owner, but by OpenSea.
    function _msgSender() internal override view returns (address sender) {
        return ContextMixin.msgSender();
    }

    /// The following functions are overrides required by Solidity.

    function _beforeTokenTransfer(address from, address to, uint256 tokenId)
        internal
        override(ERC721, ERC721Enumerable)
    {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
